name: Terraform CI/CD

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-ci.yml'
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:

env:
  TF_VERSION: '1.6.0'
  TFLINT_VERSION: '0.48.0'
  GO_VERSION: '1.21'
  AWS_REGION: 'us-east-1'

jobs:
  # ===========================================================================
  # Terraform Format Check
  # ===========================================================================
  terraform-format:
    name: Terraform Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        working-directory: terraform
        run: terraform fmt -check -recursive -diff
        continue-on-error: false

      - name: Comment PR on Format Failure
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **Terraform Format Check Failed**\n\nPlease run `terraform fmt -recursive` to format your code.'
            })

  # ===========================================================================
  # Terraform Validation
  # ===========================================================================
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module:
          - '.'
          - 'modules/vpc'
          - 'modules/kms'
          - 'modules/s3'
          - 'modules/rds'
          - 'modules/iam'
          - 'modules/networking'
          - 'modules/config'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: terraform/${{ matrix.module }}
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: terraform/${{ matrix.module }}
        run: terraform validate

  # ===========================================================================
  # TFLint Static Analysis
  # ===========================================================================
  tflint:
    name: TFLint Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v${{ env.TFLINT_VERSION }}

      - name: Initialize TFLint
        working-directory: terraform
        run: tflint --init

      - name: Run TFLint
        working-directory: terraform
        run: tflint --recursive --format compact

      - name: Comment PR on TFLint Issues
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ **TFLint Found Issues**\n\nPlease review the TFLint output and fix any violations.'
            })

  # ===========================================================================
  # Terraform Security Scan
  # ===========================================================================
  security-scan:
    name: Security Scan (tfsec)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: terraform
          soft_fail: false
          format: sarif
          additional_args: --minimum-severity MEDIUM

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif

  # ===========================================================================
  # Terratest Unit Tests
  # ===========================================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TEST }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download Go Dependencies
        working-directory: terraform/tests
        run: go mod download

      - name: Run Unit Tests
        working-directory: terraform/tests
        run: go test -v -timeout 30m ./unit/...
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: terraform/tests/*.out

  # ===========================================================================
  # Terraform Plan (Pull Requests)
  # ===========================================================================
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [terraform-format, terraform-validate, tflint]
    strategy:
      matrix:
        environment: [dev, staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Select Workspace
        working-directory: terraform
        run: |
          terraform workspace select ${{ matrix.environment }} || terraform workspace new ${{ matrix.environment }}

      - name: Terraform Plan
        working-directory: terraform
        run: |
          terraform plan \
            -var-file=terraform.tfvars.${{ matrix.environment }} \
            -out=tfplan-${{ matrix.environment }} \
            -no-color

      - name: Save Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.environment }}
          path: terraform/tfplan-${{ matrix.environment }}
          retention-days: 5

      - name: Comment Plan Output on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN_OUTPUT: ${{ steps.plan.outputs.stdout }}
        with:
          script: |
            const output = process.env.PLAN_OUTPUT;
            const truncatedOutput = output.length > 65000
              ? output.substring(0, 65000) + '\n\n... (truncated)'
              : output;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan - ${{ matrix.environment }}\n\`\`\`terraform\n${truncatedOutput}\n\`\`\``
            })

  # ===========================================================================
  # Cost Estimation
  # ===========================================================================
  cost-estimate:
    name: Cost Estimation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [terraform-plan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Cost Estimation
        working-directory: terraform
        run: |
          chmod +x scripts/estimate-costs.sh
          ./scripts/estimate-costs.sh > cost-estimate.txt

      - name: Comment Cost Estimate on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const costEstimate = fs.readFileSync('terraform/cost-estimate.txt', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 💰 Cost Estimation\n\`\`\`\n${costEstimate}\n\`\`\``
            })

  # ===========================================================================
  # Status Check Summary
  # ===========================================================================
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs:
      - terraform-format
      - terraform-validate
      - tflint
      - security-scan
    if: always()
    steps:
      - name: Check CI Status
        run: |
          if [[ "${{ needs.terraform-format.result }}" == "success" ]] && \
             [[ "${{ needs.terraform-validate.result }}" == "success" ]] && \
             [[ "${{ needs.tflint.result }}" == "success" ]] && \
             [[ "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ Some CI checks failed. Please review the output above."
            exit 1
          fi

# ==============================================================================
# Job Permissions
# ===========================================================================
permissions:
  contents: read
  pull-requests: write
  security-events: write
  issues: write
