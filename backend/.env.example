# ==============================================================================
# HIPAA-Compliant Backend API - Environment Configuration
# ==============================================================================
# This file documents all required and optional environment variables for the
# application. Copy this file to .env for local development.
#
# SECURITY WARNING: Never commit .env files with real credentials to version control!
# ==============================================================================

# ------------------------------------------------------------------------------
# Application Environment
# ------------------------------------------------------------------------------
# Environment name: development, staging, or production
# Controls logging verbosity and feature flags
ENVIRONMENT=development

# Logging level: DEBUG, INFO, WARNING, ERROR, CRITICAL
# Use DEBUG for development, INFO for production
LOG_LEVEL=DEBUG

# ------------------------------------------------------------------------------
# Database Configuration
# ------------------------------------------------------------------------------
# PostgreSQL connection URL with asyncpg driver
# Format: postgresql+asyncpg://user:password@host:port/database
#
# For local development: Use Docker Compose PostgreSQL
# For Railway deployment: Auto-injected by Railway when PostgreSQL service linked
DATABASE_URL=postgresql+asyncpg://user:password@localhost:5432/hipaa_db

# ------------------------------------------------------------------------------
# CORS Configuration
# ------------------------------------------------------------------------------
# Comma-separated list of allowed origins for Cross-Origin Resource Sharing
#
# Local development defaults include common frontend development ports
# Production: Must explicitly list allowed origins (no wildcards with credentials)
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:8080

# ------------------------------------------------------------------------------
# Authentication Configuration
# ------------------------------------------------------------------------------
# OIDC Issuer URL - The base URL of your identity provider
# Examples:
#   - AWS Cognito: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_ABC123
#   - Auth0: https://your-tenant.auth0.com
#   - Okta: https://your-domain.okta.com
OIDC_ISSUER_URL=https://cognito-idp.us-east-1.amazonaws.com/us-east-1_ABC123

# OIDC Client ID - Public identifier for your application
# Obtained from your IdP when creating an application/client
OIDC_CLIENT_ID=your_client_id_here

# JWT Tenant Claim Name - Name of the JWT claim containing tenant identifier
# Common values: tenant_id, organization_id, org_id, custom:tenant_id (Cognito)
# This claim MUST be present in JWT tokens or requests will be rejected
JWT_TENANT_CLAIM_NAME=tenant_id

# JWT Maximum Lifetime - Maximum allowed token lifetime in minutes
# HIPAA recommendation: 60 minutes or less for PHI access
# Tokens with exp claim exceeding this will be rejected
JWT_MAX_LIFETIME_MINUTES=60

# JWKS Cache TTL - How long to cache JWKS keys in seconds
# Default: 3600 (1 hour)
# Longer TTL reduces IdP API calls but delays key rotation detection
JWKS_CACHE_TTL_SECONDS=3600

# ------------------------------------------------------------------------------
# AWS Configuration
# ------------------------------------------------------------------------------
# AWS Region - Region for AWS services (Secrets Manager, etc.)
AWS_REGION=us-east-1

# AWS Secrets Manager Secret ID - ARN or name of secret containing runtime secrets
# This secret should contain:
#   - OIDC_CLIENT_SECRET: OAuth client secret for token exchange
#   - (Future) Encryption keys, API keys, etc.
#
# Leave empty for local development (will skip AWS Secrets Manager integration)
# Required for production deployment
AWS_SECRETS_MANAGER_SECRET_ID=hipaa-template/prod/secrets

# ------------------------------------------------------------------------------
# Notes for Railway Deployment
# ------------------------------------------------------------------------------
# When deploying to Railway:
# 1. DATABASE_URL is automatically injected when PostgreSQL service is linked
# 2. Set AWS_SECRETS_MANAGER_SECRET_ID to your secret's ARN or name
# 3. Configure IAM role with secretsmanager:GetSecretValue permission
# 4. Update ALLOWED_ORIGINS to include your production frontend URL
# 5. Set ENVIRONMENT=production and LOG_LEVEL=INFO
#
# See docs/RAILWAY_ENV.md for complete Railway deployment guide
# See docs/AUTH_CONFIGURATION.md for IdP setup instructions
# ==============================================================================
